// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: dense.proto

package dense

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion3

type ImageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostId string `protobuf:"bytes,1,opt,name=postId,proto3" json:"postId,omitempty"`
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dense_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_dense_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_dense_proto_rawDescGZIP(), []int{0}
}

func (x *ImageData) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *ImageData) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	IsNext  bool   `protobuf:"varint,3,opt,name=isNext,proto3" json:"isNext,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dense_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_dense_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_dense_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Response) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Response) GetIsNext() bool {
	if x != nil {
		return x.IsNext
	}
	return false
}

var File_dense_proto protoreflect.FileDescriptor

var file_dense_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x64,
	0x65, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0x52, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4e, 0x65, 0x78, 0x74, 0x32, 0xac, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x12, 0x33, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x73, 0x66,
	0x77, 0x12, 0x10, 0x2e, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x0f, 0x2e, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x10, 0x2e, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0f, 0x2e, 0x64, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x10, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x10, 0x2e, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x0f, 0x2e, 0x64, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dense_proto_rawDescOnce sync.Once
	file_dense_proto_rawDescData = file_dense_proto_rawDesc
)

func file_dense_proto_rawDescGZIP() []byte {
	file_dense_proto_rawDescOnce.Do(func() {
		file_dense_proto_rawDescData = protoimpl.X.CompressGZIP(file_dense_proto_rawDescData)
	})
	return file_dense_proto_rawDescData
}

var file_dense_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dense_proto_goTypes = []interface{}{
	(*ImageData)(nil), // 0: dense.ImageData
	(*Response)(nil),  // 1: dense.Response
}
var file_dense_proto_depIdxs = []int32{
	0, // 0: dense.Predict.predict_nsfw:input_type -> dense.ImageData
	0, // 1: dense.Predict.predict_logo:input_type -> dense.ImageData
	0, // 2: dense.Predict.predict_pipeline:input_type -> dense.ImageData
	1, // 3: dense.Predict.predict_nsfw:output_type -> dense.Response
	1, // 4: dense.Predict.predict_logo:output_type -> dense.Response
	1, // 5: dense.Predict.predict_pipeline:output_type -> dense.Response
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dense_proto_init() }
func file_dense_proto_init() {
	if File_dense_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dense_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dense_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dense_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dense_proto_goTypes,
		DependencyIndexes: file_dense_proto_depIdxs,
		MessageInfos:      file_dense_proto_msgTypes,
	}.Build()
	File_dense_proto = out.File
	file_dense_proto_rawDesc = nil
	file_dense_proto_goTypes = nil
	file_dense_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PredictClient is the client API for Predict service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PredictClient interface {
	PredictNsfw(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*Response, error)
	PredictLogo(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*Response, error)
	PredictPipeline(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*Response, error)
}

type predictClient struct {
	cc grpc.ClientConnInterface
}

func NewPredictClient(cc grpc.ClientConnInterface) PredictClient {
	return &predictClient{cc}
}

func (c *predictClient) PredictNsfw(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dense.Predict/predict_nsfw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictClient) PredictLogo(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dense.Predict/predict_logo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *predictClient) PredictPipeline(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dense.Predict/predict_pipeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PredictServer is the server API for Predict service.
type PredictServer interface {
	PredictNsfw(context.Context, *ImageData) (*Response, error)
	PredictLogo(context.Context, *ImageData) (*Response, error)
	PredictPipeline(context.Context, *ImageData) (*Response, error)
}

// UnimplementedPredictServer can be embedded to have forward compatible implementations.
type UnimplementedPredictServer struct {
}

func (*UnimplementedPredictServer) PredictNsfw(context.Context, *ImageData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictNsfw not implemented")
}
func (*UnimplementedPredictServer) PredictLogo(context.Context, *ImageData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictLogo not implemented")
}
func (*UnimplementedPredictServer) PredictPipeline(context.Context, *ImageData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictPipeline not implemented")
}

func RegisterPredictServer(s *grpc.Server, srv PredictServer) {
	s.RegisterService(&_Predict_serviceDesc, srv)
}

func _Predict_PredictNsfw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictServer).PredictNsfw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dense.Predict/PredictNsfw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictServer).PredictNsfw(ctx, req.(*ImageData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Predict_PredictLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictServer).PredictLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dense.Predict/PredictLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictServer).PredictLogo(ctx, req.(*ImageData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Predict_PredictPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PredictServer).PredictPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dense.Predict/PredictPipeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PredictServer).PredictPipeline(ctx, req.(*ImageData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Predict_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dense.Predict",
	HandlerType: (*PredictServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "predict_nsfw",
			Handler:    _Predict_PredictNsfw_Handler,
		},
		{
			MethodName: "predict_logo",
			Handler:    _Predict_PredictLogo_Handler,
		},
		{
			MethodName: "predict_pipeline",
			Handler:    _Predict_PredictPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dense.proto",
}
